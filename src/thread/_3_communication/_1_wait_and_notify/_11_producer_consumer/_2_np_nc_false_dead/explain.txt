程序运行结果：
    生产者 生产者1 RUNNABLE了
    生产者 生产者1 WAITING了★
    生产者 生产者2 WAITING了★
    消费者 消费者2 RUNNABLE了
    消费者 消费者2 WAITING了☆
    消费者 消费者1 WAITING了☆
    生产者 生产者1 RUNNABLE了
    生产者 生产者1 WAITING了★
    生产者 生产者2 WAITING了★
    main RUNNABLE
    生产者1 WAITING
    消费者1 WAITING
    生产者2 WAITING
    消费者2 WAITING

分析：
    从打印的信息来看，呈假死状态的进程中的所有的线程都呈WAITING状态。代码中已经用了wait/notify了，
为什么会出现这样的情况呢？
    在代码中确实已经通过wait/notify进行通信了，但不保证notify唤醒的是异类，也许是同类，
比如“生产者”唤醒“生产者”，或“消费者”唤醒“消费者”这样的情况。如果按这样情况运行的比率积少成多，
就会导致所有的线程都不能继续运行下去，大家都在等待，都呈WAITING状态，程序最后也就呈“假死”状态了，
不能继续运行下去了。
    分析日志的过程：
    1)生产者1进入生产，生产完毕后发出通知(但此通知属于“通知过早”)，并释放锁，准备进入下一次的while循环。
    2)生产者1进入下一次while循环，迅速再次持有锁，发现产并没有被消费，所以生产者1呈等待状态★。
    3)生产者2被start()启动，生产者2发现产品没有被消费，所以生产者2也呈等待状态★。
    4)消费者2被start()启动了，消费者2持有锁，将 产品消费并发出通知(发出通知唤醒了第7行生产者1)，
运行结束后释放锁，等待消费者2进入下次循环。
    5)消费者2进入了下一次的while循环，并持有锁，发现产品并未生产，所以释放锁并呈等待状态☆。
    6)消费者1被start()启动，快速持有锁，发现产品并未生产，所以释放锁并呈等待状态☆。
    7)由于消费者2在第4行已经将产品进行消费，唤醒了第7行的生产者1进行顺利生产后释放，
并发出通知(此通知唤醒了第9行的生产者2)，生产者1准备进入下一次的while循环。
    8)这时生产者1进入下一次的while循环再次持有锁，发现产品还并未消费，所以生产者1也呈等待状态★。
    9)由于第7行的生产者1唤醒了生产者2，生产者2发现产品还并未被消费，所以生产者2也呈等待状态★。
    出现★/☆符号就代表本线程进入等待状态，需要额外注意这样的执行结果。
    假死出现的主要原因是有可能连续唤醒同类。如果解决？不光唤醒同类，将异类也一同唤醒就解决了。